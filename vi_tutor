				The vi Editor
 
vi is the standard Unix text editor.  This tutorial will only give the
basics of using vi.  There are many Unix books available that devote
entire chapters to this editor, so you are directed to them for more
thorough explanations.
 
You are encouraged to try the commands out as they are presented.  This
tutorial assumes that you have already copied this file to one of your
own directories, so that you can vi the file yourself and save any
changes you make.  You may want to print this file out before you go
through it.
 
If you still need to copy it to one of your directories, see the vi
tutorial in cnsfinfo tutor.
 
 
Remember, to move around in the file, you can enter:
 
<ctrl-d>	Scroll down
<ctrl-u>	Scroll up
 
Try the scroll down command now to see the next portion of text.
 
 
 
More commands for moving around are given below, but these are enough to
get you started.
 
 
TERMINAL TYPES WITH vi
----------------------
 
One of the most common stumbling blocks encountered when using vi is
making sure the system knows what type of terminal you are using or
emulating.  You specify this through the TERM enviroment variable.
Typically, you are asked upon login to enter the type of terminal you
are using.  The TERM variable would then be set up correctly for
you.  If you aren't sure what TERM is set to, enter:
 
env TERM
 
Enter this command when you are in the shell (DON'T ENTER THIS WHILE IN
vi).  If the TERM variable is incorrect, use the setenv command to
change the variable TERM. For example, enter:
 
setenv TERM vt100
 
when you are in the shell (DON'T ENTER THIS WHILE IN vi).  This sets
the TERM variable to vt100.  If you don't know what to set your
terminal to, contact a knowledgeable colleague or a consultant.
 
 
STARTING & STOPPING vi
----------------------
 
To start editing a file named taxes, enter: vi taxes
 
If vi complains about not knowing about your terminal, or your screen
is messed up, quit out of vi with a
 
:q!   <----(That's 3 seperate characters, colon, q, exclamation)
 
Then, change or set your TERM variable as above to the proper
terminal type.
 
There are several ways to get out. ZZ saves and quits the editor (yes,
that is 2 capital Z's).  :q! exits without saving, even though there
have been changes made.
 
 
NOTATION
--------
 
In the commands below, the notation: ctrl-x means to hold down the
CONTROL key while simultaneously pressing the x key.  Also, <up arrow>
refers to the arrow keys available on some keyboards. <return> refers
to the carriage return key. ESCAPE or ESC refer to the escape key.  If
your keyboard does not have an ESCAPE key, you can use ctrl-[.
 
 
vi COMMANDS
-----------
 
vi differs from many other editors in that there are two different
modes: command mode and input mode.  When you are in command mode,
all your keystrokes are interpreted as commands and ARE NOT entered
into the file.  While in input mode, all your keystrokes are treated
as input, and ARE entered into the file.  You get from input to
command mode by hitting the ESCAPE key.  You do not need to hit the
return key for most vi commands.  They execute as soon as you enter
the command.
 
TIP: IF YOU ARE NOT SURE WHERE YOU ARE (COMMAND OR INPUT MODE), HIT THE
     ESCAPE KEY TWICE.  THEN, YOU ARE SURE YOU ARE IN COMMAND MODE.
 
You can get from command to input several ways, but first let's see how
you move around.
 
MOVING AROUND
 
There are several commands to move around, depending on how far you
want to go.  Remember, you must be in command mode to issue these.
 
Most commands can be prefixed by a number, n, that specifies that the
command should be repeated n times. For example, 5w means move 5 words
forward.
 
MOVING THE WINDOW UP AND DOWN
 
ctrl-d	Window moves DOWN by half a screen full.
ctrl-u	Window moves UP by half a screen full.
ctrl-f	Window moves FORWARD by a screen full.
ctrl-b	Window moves BACK by a screen full.
 
Go ahead and give these a try.
 
 
MOVING CURSOR WITHIN THE WINDOW
 
k or <up arrow>		Moves cursor up one line
j or <down arrow>	Moves cursor down one line
l or <right arrow>	Moves cursor right one character
h or <left arrow>	Moves cursor left one character
<return>		Moves cursor to beginning of next line
- (minus)		Moves cursor to beginning of previous line
w			Moves cursor to beginning of next word
b			Moves cursor to beginning of previous word
^ or 0			Moves cursor to beginning of current line
$			Moves cursor to end of current line
 
NOTE: IF YOUR ARROW KEYS DON'T WORK AS THEY SHOULD, YOUR TERM VARIABLE MAY
      BE SET TO AN INCORRECT VALUE.  YOU MAY HAVE TO EXPERIMENT WITH
      DIFFERENT VALUES.
 
MOVING TO A POSTION OUTSIDE THE CURRENT WINDOW
nG	move to line n
G	move to end of file
ctrl-g  tells you the line number of the current line
 
Try going to line 355.  You'll be told how to get back here.
 
SEARCHING
Note: For the searching commands, you have to hit a return to execute
the command.  Searches are circular.  The search starts at the current
location and proceeds down or up the file.  If the end or beginning
of file is hit, the search goes to the beginning or end of file and
continues from there.  If the search makes it back to the location it
started from, it stops and lets you know it didn't find anything.
Searches are case sensitive!
 
/stringy<return>	search forward for string stringy
?stringy<return>	search backward for string stringy
 
If you want to continue searching for the string, you can use the
following commands:
 
n	continue search in the same direction as the original search
N	continue search in the opposite direction as the original search
 
Try searching for the string Gary.  To return to this point
search for the string SEARCHING, which is the name of this section.
Try searching for the string consisting of your first and last names.
Most likely, you'll get the "Pattern not found" message.  Note that it
is all right to have spaces in your search strings.
 
 
 
INSERTING TEXT
 
The following commands will take you from command mode to input mode.
All the characters you type in will be put into your file, until
you hit the ESCAPE key.
 
i	Insert text immediately before the cursor.
a	Insert text immediately after the cursor.
o	Open a new line immdiately after the current line.
O	Open a new line immdiately before the current line.
	(Note this is an uppercase o, not a zero)
 
Try inserting another word after dog that's in alphabetical order in the
line below (remember to hit ESCAPE when your're done inputting):
 
apple bat cub dog fox grape
 
Fill in the list of recent presidents below by going to the line numbered
3, opening a line after it, and typing in the preceding president. Then, go
back to line 3, open a line before it, then type in the following president.
 
1. George Bush
3. Jimmy Carter
5. Richard Nixon
 
 
DELETING TEXT
 
Text can be deleted by the character, word, or line.
 
x		Deletes character under the cursor
dw		Deletes a word (including space after it)
d$ or D		Deletes from the cursor until the end of line
d^ (d caret)	Deletes from the beginning of the line to the space or
		character to the left of the cursor
dd		Deletes the current line
 
Remember, these and most other commands can take a number as a prefix
to perform multiple actions.  So, 5dd deletes 5 lines.
 
 
Try these commands out on the following two paragraphs from the ls man
page.
 
     The ls command writes to  standard output the contents of
     each specified  directory or  the name of  each specified
     file, along with  any other information you  ask for with
     the flags.  If you do not specify a file or directory, ls
     displays the contents of the current directory.
 
     By  default, ls  displays all  information in  alphabetic
     order by file name.  The collating sequence is determined
     by the  NLCTAB environment variable (see  "ctab").  Indi-
     vidual file names are listed before directory names.
 
 
 
UNDOING PREVIOUS COMMANDS
 
Changes can be undone to a certain extent.
 
u	Undoes last change.  Note that 2 undo's will undo
        the undo (nothing changes)
U	Undoes all changes on a line.  Must be done before changing to
        another line.
 
 
CUT & PASTE
 
When you delete characters, words, or lines, the items are not
immediately gone forever.  The discarded string is put into a buffer
and is available to be placed somewhere else.  The buffer remains
intact until another item is discarded or copied into the buffer.
 
The buffer also holds text you want to copy to another location.  The
following commands will place a copy of the item in the buffer which
can then be placed in other locations.
 
nyy	yanks n lines into the buffer starting at the current line
nyw	yanks n words into the buffer starting at the current word
	(Remember, n represents a number, not the letter "n")
 
The next two commands take the contents of the buffer and puts it
in the file.
 
p	puts contents after current line or cursor postion
P	puts contents before current line or cursor postion
 
Since the deletion commands put the discarded text into the buffer,
the p and P commands can be used to place the text elsewhere.
 
Try the cut & paste commannds on the following lines.  Yank and delete
lines or words, then put them somewhere else.
 
This is the first line in the bunch.
This is the second line in the bunch.
This is the third line in the bunch.
This is the fourth line in the bunch.
This is the fifth line in the bunch.
This is the sixth line in the bunch.
This is the seventh line in the bunch.
This is the eighth line in the bunch.
This is the ninth line in the bunch.
 
 
SEARCH & SUBSTITUTE
 
Another important function of any editor is to replace a string with
another one.  The form of the vi command that does this is:
 
:n1,n2s/string1/string2/
 
Where:
n1,n2 is the range of lines where you want the substitutions to occur. 
The current line can be referred to as "." (period), and the last line
can be referred to as "$" (dollar sign).  Relative references can also be
made by adding or subtracting a number onto a line number.  For example:
 
.,$	current line to the end of file
5,.	line 5 to the current line
1,$	line 1 to end of the file (entire file)
.,.+5	current line to 5 lines down from current line (relative reference)
.-2,.	2 lines above current line to current line (relative reference)
 
 
string1	is the string to be replaced
string2 is the string that replaces string1
 
REMEMBER: The current line is the one with the cursor in it.
 
The substitute command in this form will only change the first
occurence of string1 in the range of lines.  If you want to change
every occurence of string1 in a line, append a g to the end of the
command, as in:
 
:n1,n2s/string1/string2/g
 
Try the substitute commands out on the lines below. As a first
exercise, try substituting only the first occurence of Mickey in each
line to Minnie.  Then try changing every occurence of cheese to
velveeta.  Try using relative references to limit the range of lines of
the substitutions.
 
Mickey likes to eat cheddar cheese. Mickey also likes swiss cheese.
Goofy will eat a lot more colby cheese than Mickey will.
Donald eats Mickey's feta cheese, but Mickey won't eat Donald's cheese.
 
 
WRAPUP
 
This tutor should give you enough information to get started.  vi has
many more features.  There are a variety of papers available describing
these additional features, and many Unix books cover vi in some depth.
 
As an additional exercise, once you are comfortable with the commands
described in this tutor, you can edit this file to take out all the
text, and just leave the lines describing the commands.  That way you
could have a little vi cheat sheet which could be printed out and
posted near your terminal.  As you learn more useful vi commands, you
could add these to the file.
 
 
 
END OF TUTOR
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
You should be here after executing the G command.  To get back to where
you were before, go to line 141.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Here are some test strings that are used in the search demos.
Gary thinks AIX is wonderful.
To get back to the searching section, search for the string SEARCHING
You can use either a forward or backward search.
