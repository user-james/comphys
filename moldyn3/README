This file outlines the methods and results involved with Assignment 3.

The files compiled and ran as outlined in the file /home/users/PY4109/LJ_moldyn/README. Any changes to the files will be explained.


==========================================================================================================================
EXERCISE 1:

In this exercise want to compare the power spectrum of the cluster with the eigenvalues of the dynamical matrix (calculated previously)


Important Files:
    - dynamics.c
    - spectrum_XX (where XX specifies a number)
    - e_values.txt
    - evals_hist.py
    - power_spectrum.py
    - eval_spectrum.jpg
    - power_spectrum.jpg
    - power_spectrum_err.jpg
 

Methods:
    - The program 'dynamics.c' was compiled and ran as stated in the question. This program created several files called 'spectrum_XX' where the XX just specifies the number of file (higher number implies a higher termperature). These files just recorded each vibrational frequency and its respective signal strength. Using a Python file 'power_spectrum.py' four different files were chosen and a power spectrum was plotted from each, an example plot can be found in 'power_spectrum.jpg' (initial erroneous plot can be found in 'power_spectrum_err.jpg', see results). Using a separate Python program 'eval_hist.py' a histogram was plotted of the different frequencies defined by the eigenvalues of the dynamical matrix (calculated in assignment 2) and saved to the file 'eval_spectrum.jpg'. This spectrum was then compared with the power spectrum of the frequencies.


Results:
    - The file 'power_spectrum_err.jpg' shows the power spectrum when all values are included. The first thing noticed is that there appears to be a large spike in the power spectrum at zero which is not seen in the eigenvalue spectrum. This is not to be worried about as it is due to numerical error. Recall that when we plotted the the eigenvalue spectrum we had to remove the first few values as they yielded imaginary vibrational frequencies, which is clearly not the case as it makes no physical sense. When making the fourier transform this same error caused there to be a large spike in the values at zero. Although I am not exactly sure why the numerics cause there to be imaginary frequencies, I think it is due to us assuming that the system is exactly at equilibrium when we calculate its eigenvalues when this is in fact just an approximation. In order to compare the spectrums properly, up to 0.05 was excluded from the plot and a new plot 'power_spectrum.jpg' was plotted.

    - Now using the plot 'power_spectrum.jpg' we see that, when we compare the two spectrums, they qualitatively follow a very similar distribution. This makes sense as the eigenvalues are related to the specific vibrational frequencies that the atoms in the cluster can have and so we would expect the signal strengths of the different frequencies to be distributed in accordance with how common different ranges of eigenvalues are (defined by the histogram).

    - It can also be noted that when we increase the temperature the distribution the power spectrum follow appears to shift to the left while the average power across all frequencies increases. This is because as we heat the cluster more and more the atoms vibrate more. If you look at a plot of an LJ-Potential, as you increase the potential the atoms have more 'room' to vibrate, they pick up more kinetic energy and thus have larger amplitude vibrations. This increase in amplitude causes a lowering in the frequency causing the left shift of the power spectrum we see, while the increase in kinetic energy causes the shift upwards of the spectrum.




==========================================================================================================================
EXERCISE 2:

In this exercise we are going to look into the expansion of the cluster as we increase the temperature.


Important Files:
    - heat_capacity.c
    - pair_distribution_XX (where XX is a number)
    - heat_cap_out.txt
    - mean_atomic_sep.py
    - separation_vs_temp.jpg


Methods:
    - Here we wanted to compare the average atomic separation in the cluster for increasing temperature. To do this we needed to know the temperatures the we were working with. In order to record these temperatures I used Linux's redirection operator '>>' to redirect the output from a running program to a file. The output from the compiled program used in assingment 1 'heat_capacity.c' can be found in 'heat_cap_out.txt' (used to find temperatures at which pair distributions were calculated).
    - Then for different temperatures, an average atomic distance was calculated using the Python program 'mean_atomic_sep.py'. These values were then plotted against the temperature, along with a fitted line, and this plot was saved in 'separation_vs_temp.jpg'.
    - The thermal expansivitiy was calculated by finding the slope of the staight line fitted to the data and dividing by the mean atomic separation at (approximately) zero temperature.


Results:
    - Looking at the plotted graph in 'separation_vs_temp.jpg' we can see that the data plotted can be fitted to a straight line. This shows that the crystal we simulated expands linearly with temperature. However, in this simulation we only looked at the expansion for low temperatures, therefore there may be some limit to this linearity as the cluster gets hotter.
    - The thermal expansivity was calculated to be ~0.3461.


==========================================================================================================================
EXERCISE 3:

In this exercise we want to compare our simulated thermal expansivity with what would be expected from a quasi-harmonic approximation using the vibration mode Gruneisen parameters.


Important files:
    - dynamics.c
    - gruneisen.txt
    - gruneisen_plot.py
    -


Methods:
    - The gruneisen parameters, pressure (dV/ds) and the scaling are all printed to standard output by the compiled program 'dynamical_matrix.c'. Here I just modified the program to output these values to the file 'gruneisen.txt'. A Python program called 'gruneisen_plot.py' then grabbed this data and, using the method outlined in the notes, found the temperature using these parameters and plotted it against the scaling factor.
    - From the plot two points were chosen in the positive temperature range for the slope to be calculated. The slope gives the values of the thermal expansivity.
    

Results:
    - The thermal expansivity was calculated to be ~0.3882. This is quite close to the value calculate before but is slightly off. This may be explained by the fact that in exercise 2 we need to know the average atomic separation for zero temperature. However, we can only approximate this by taking the atomic separation for the lowest temperature we are working with (which is non-zero). Therefore we would expect there to be differences in the calculated values.
    - Just like it was stated in the previous excercise the left shift in the power spectrum is due to the increased vibrational amplitudes allowed by the fact that the atoms are spaced futher apart. Therefore the shift seen in the power spectrum agrees with the notion that the cluster expands as temperature increases.
